/*
 * EditNowView.java
 */

package editnow;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.print.PrinterException;
import java.io.IOException;
import javax.swing.text.BadLocationException;
import org.jdesktop.application.Action;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JEditorPane;
import javax.swing.JPanel;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.FileReader;
import javax.swing.JScrollPane;
import javax.swing.JViewport;
import javax.swing.text.rtf.RTFEditorKit;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.OutputStream;
import javax.swing.JOptionPane;
import javax.swing.text.Segment;
import javax.swing.JMenuItem;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.Toolkit;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledEditorKit;
import javax.swing.text.rtf.RTFEditorKit.*;
import javax.swing.border.*;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;


/**
 * The application's main frame.
 */
public class EditNowView extends FrameView {

    public EditNowView(SingleFrameApplication app) {
        super(app);

        initComponents();
        myInit();
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = EditNowApp.getApplication().getMainFrame();
            aboutBox = new EditNowAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        EditNowApp.getApplication().show(aboutBox);
    }
    
    @Action
    public void showOpenDialogBox() throws IOException
    {
        int optionSelected;
        optionSelected=openDialogBox.showOpenDialog(mainPanel);
        if(optionSelected==0)
        {
            File file=openDialogBox.getSelectedFile();
            openFile(file, getEditorPane());
        }
    }
    
    @Action
    public void showSaveAsDialogBox()
    {
        int optionSelected;
        optionSelected=saveAsDialogBox.showSaveDialog(mainPanel);
        if(optionSelected==0)
        {
            String fileExt;
            fileExt=saveAsDialogBox.getFileFilter().getDescription();
            saveFile(getEditorPane(), saveAsDialogBox.getSelectedFile(),fileExt, 0);
        }
    }
    
    @Action
    public void save()
    {
        if(getEditorPane().myGetFile()==null)
        {
            showSaveAsDialogBox();
        }
        else
        {
            EditorPane pane;
            pane=getEditorPane();
            saveFile(pane, pane.myGetFile(),null, 1);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        toolbarTabbedPane = new javax.swing.JTabbedPane();
        homePanel = new javax.swing.JPanel();
        openButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        saveAsButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        printButton = new javax.swing.JButton();
        propertiesButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        closeButton = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JSeparator();
        editPanel = new javax.swing.JPanel();
        pasteButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        cutButton = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JSeparator();
        fontSelectionComboBox = new javax.swing.JComboBox();
        boldButton = new javax.swing.JButton();
        italicButton = new javax.swing.JButton();
        underlineButton = new javax.swing.JButton();
        subscriptButton = new javax.swing.JButton();
        superscriptButton = new javax.swing.JButton();
        strikeButton = new javax.swing.JButton();
        fontSizeComboBox = new javax.swing.JComboBox();
        fontColorButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JSeparator();
        undoButton = new javax.swing.JButton();
        redoButton = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JSeparator();
        findPanel = new javax.swing.JPanel();
        findTextField = new javax.swing.JTextField();
        replaceTextField = new javax.swing.JTextField();
        searchNextButton = new javax.swing.JButton();
        replaceButton = new javax.swing.JButton();
        replaceAllButton = new javax.swing.JButton();
        searchPrevButton = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        editorTabbedPane = new javax.swing.JTabbedPane();
        emptyPanel = new javax.swing.JPanel();
        openDialogBox = new javax.swing.JFileChooser();
        saveAsDialogBox = new javax.swing.JFileChooser();
        tabPopupMenu = new javax.swing.JPopupMenu();
        editorPopupMenu = new javax.swing.JPopupMenu();
        propertiesDialogBox = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JSeparator();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        fontColorDialogBox = new javax.swing.JDialog();
        fontColorChooser = new javax.swing.JColorChooser();
        fontColorOkButton = new javax.swing.JButton();
        fontColorCancelButton = new javax.swing.JButton();

        mainPanel.setName("mainPanel"); // NOI18N

        toolbarTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        toolbarTabbedPane.setName("toolbarTabbedPane"); // NOI18N
        toolbarTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                toolbarTabbedPaneMouseClicked(evt);
            }
        });

        homePanel.setName("homePanel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(editnow.EditNowApp.class).getContext().getActionMap(EditNowView.class, this);
        openButton.setAction(actionMap.get("showOpenDialogBox")); // NOI18N
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(editnow.EditNowApp.class).getContext().getResourceMap(EditNowView.class);
        openButton.setText(resourceMap.getString("openButton.text")); // NOI18N
        openButton.setName("openButton"); // NOI18N

        saveButton.setAction(actionMap.get("save")); // NOI18N
        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N

        saveAsButton.setAction(actionMap.get("showSaveAsDialogBox")); // NOI18N
        saveAsButton.setText(resourceMap.getString("saveAsButton.text")); // NOI18N
        saveAsButton.setName("saveAsButton"); // NOI18N

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setName("jSeparator1"); // NOI18N

        printButton.setMnemonic('P');
        printButton.setText(resourceMap.getString("printButton.text")); // NOI18N
        printButton.setMaximumSize(new java.awt.Dimension(57, 23));
        printButton.setMinimumSize(new java.awt.Dimension(57, 23));
        printButton.setName("printButton"); // NOI18N
        printButton.setPreferredSize(new java.awt.Dimension(57, 23));
        printButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                printButtonMouseClicked(evt);
            }
        });

        propertiesButton.setText(resourceMap.getString("propertiesButton.text")); // NOI18N
        propertiesButton.setName("propertiesButton"); // NOI18N
        propertiesButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                propertiesButtonMouseClicked(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setName("jSeparator2"); // NOI18N

        closeButton.setMnemonic('C');
        closeButton.setText(resourceMap.getString("closeButton.text")); // NOI18N
        closeButton.setName("closeButton"); // NOI18N
        closeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                closeButtonMouseClicked(evt);
            }
        });

        jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator6.setName("jSeparator6"); // NOI18N

        javax.swing.GroupLayout homePanelLayout = new javax.swing.GroupLayout(homePanel);
        homePanel.setLayout(homePanelLayout);
        homePanelLayout.setHorizontalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(openButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveAsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(printButton, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE)
                    .addComponent(propertiesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 83, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator6, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(220, 220, 220))
        );
        homePanelLayout.setVerticalGroup(
            homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, homePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(homePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator6, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addComponent(openButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, homePanelLayout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveAsButton))
                    .addGroup(homePanelLayout.createSequentialGroup()
                        .addComponent(printButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(propertiesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(closeButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE))
                .addGap(9, 9, 9))
        );

        toolbarTabbedPane.addTab(resourceMap.getString("homePanel.TabConstraints.tabTitle"), homePanel); // NOI18N

        editPanel.setName("editPanel"); // NOI18N

        pasteButton.setText(resourceMap.getString("pasteButton.text")); // NOI18N
        pasteButton.setName("pasteButton"); // NOI18N
        pasteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                pasteButtonMouseClicked(evt);
            }
        });

        copyButton.setText(resourceMap.getString("copyButton.text")); // NOI18N
        copyButton.setName("copyButton"); // NOI18N
        copyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                copyButtonMouseClicked(evt);
            }
        });

        cutButton.setText(resourceMap.getString("cutButton.text")); // NOI18N
        cutButton.setName("cutButton"); // NOI18N
        cutButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cutButtonMouseClicked(evt);
            }
        });

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator4.setName("jSeparator4"); // NOI18N

        fontSelectionComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        fontSelectionComboBox.setName("fontSelectionComboBox"); // NOI18N
        fontSelectionComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fontSelectionComboBoxPropertyChange(evt);
            }
        });

        boldButton.setFont(resourceMap.getFont("boldButton.font")); // NOI18N
        boldButton.setMnemonic('B');
        boldButton.setText(resourceMap.getString("boldButton.text")); // NOI18N
        boldButton.setMaximumSize(new java.awt.Dimension(32, 32));
        boldButton.setMinimumSize(new java.awt.Dimension(32, 32));
        boldButton.setName("boldButton"); // NOI18N
        boldButton.setPreferredSize(new java.awt.Dimension(32, 32));
        boldButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                boldButtonMouseClicked(evt);
            }
        });

        italicButton.setFont(resourceMap.getFont("italicButton.font")); // NOI18N
        italicButton.setMnemonic('I');
        italicButton.setText(resourceMap.getString("italicButton.text")); // NOI18N
        italicButton.setMaximumSize(new java.awt.Dimension(32, 32));
        italicButton.setMinimumSize(new java.awt.Dimension(32, 32));
        italicButton.setName("italicButton"); // NOI18N
        italicButton.setPreferredSize(new java.awt.Dimension(32, 32));
        italicButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                italicButtonMouseClicked(evt);
            }
        });

        underlineButton.setFont(resourceMap.getFont("underlineButton.font")); // NOI18N
        underlineButton.setMnemonic('U');
        underlineButton.setText(resourceMap.getString("underlineButton.text")); // NOI18N
        underlineButton.setMaximumSize(new java.awt.Dimension(32, 32));
        underlineButton.setMinimumSize(new java.awt.Dimension(32, 32));
        underlineButton.setName("underlineButton"); // NOI18N
        underlineButton.setPreferredSize(new java.awt.Dimension(32, 32));
        underlineButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                underlineButtonMouseClicked(evt);
            }
        });

        subscriptButton.setFont(resourceMap.getFont("subscriptButton.font")); // NOI18N
        subscriptButton.setText(resourceMap.getString("subscriptButton.text")); // NOI18N
        subscriptButton.setMaximumSize(new java.awt.Dimension(32, 32));
        subscriptButton.setMinimumSize(new java.awt.Dimension(32, 32));
        subscriptButton.setName("subscriptButton"); // NOI18N
        subscriptButton.setPreferredSize(new java.awt.Dimension(32, 32));
        subscriptButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                subscriptButtonMouseClicked(evt);
            }
        });

        superscriptButton.setFont(resourceMap.getFont("superscriptButton.font")); // NOI18N
        superscriptButton.setText(resourceMap.getString("superscriptButton.text")); // NOI18N
        superscriptButton.setMaximumSize(new java.awt.Dimension(32, 32));
        superscriptButton.setMinimumSize(new java.awt.Dimension(32, 32));
        superscriptButton.setName("superscriptButton"); // NOI18N
        superscriptButton.setPreferredSize(new java.awt.Dimension(32, 32));
        superscriptButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                superscriptButtonMouseClicked(evt);
            }
        });

        strikeButton.setFont(resourceMap.getFont("strikeButton.font")); // NOI18N
        strikeButton.setText(resourceMap.getString("strikeButton.text")); // NOI18N
        strikeButton.setMaximumSize(new java.awt.Dimension(32, 32));
        strikeButton.setMinimumSize(new java.awt.Dimension(32, 32));
        strikeButton.setName("strikeButton"); // NOI18N
        strikeButton.setPreferredSize(new java.awt.Dimension(32, 32));
        strikeButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                strikeButtonMouseClicked(evt);
            }
        });

        fontSizeComboBox.setEditable(true);
        fontSizeComboBox.setMaximumRowCount(9);
        fontSizeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "8", "9", "10", "11", "12", "14", "16", "18", "20", "22", "24", "26", "28", "36", "48", "72" }));
        fontSizeComboBox.setSelectedIndex(5);
        fontSizeComboBox.setMaximumSize(new java.awt.Dimension(32, 18));
        fontSizeComboBox.setName("fontSizeComboBox"); // NOI18N
        fontSizeComboBox.setPreferredSize(new java.awt.Dimension(32, 18));
        fontSizeComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                fontSizeComboBoxPropertyChange(evt);
            }
        });

        fontColorButton.setFont(resourceMap.getFont("fontColorButton.font")); // NOI18N
        fontColorButton.setText(resourceMap.getString("fontColorButton.text")); // NOI18N
        fontColorButton.setMaximumSize(new java.awt.Dimension(32, 32));
        fontColorButton.setMinimumSize(new java.awt.Dimension(32, 32));
        fontColorButton.setName("fontColorButton"); // NOI18N
        fontColorButton.setPreferredSize(new java.awt.Dimension(32, 32));
        fontColorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fontColorButtonMouseClicked(evt);
            }
        });

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator5.setName("jSeparator5"); // NOI18N

        undoButton.setText(resourceMap.getString("undoButton.text")); // NOI18N
        undoButton.setName("undoButton"); // NOI18N
        undoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                undoButtonMouseClicked(evt);
            }
        });

        redoButton.setText(resourceMap.getString("redoButton.text")); // NOI18N
        redoButton.setName("redoButton"); // NOI18N
        redoButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                redoButtonMouseClicked(evt);
            }
        });

        jSeparator9.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator9.setName("jSeparator9"); // NOI18N

        javax.swing.GroupLayout editPanelLayout = new javax.swing.GroupLayout(editPanel);
        editPanel.setLayout(editPanelLayout);
        editPanelLayout.setHorizontalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pasteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator4, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(boldButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(italicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(underlineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subscriptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(superscriptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(strikeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(editPanelLayout.createSequentialGroup()
                        .addComponent(fontSelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 193, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fontSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(fontColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator5, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(undoButton)
                    .addComponent(redoButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator9, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34))
        );
        editPanelLayout.setVerticalGroup(
            editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, editPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jSeparator9, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editPanelLayout.createSequentialGroup()
                        .addComponent(undoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                        .addComponent(redoButton))
                    .addComponent(jSeparator5, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                    .addComponent(pasteButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editPanelLayout.createSequentialGroup()
                        .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cutButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, editPanelLayout.createSequentialGroup()
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fontSelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fontColorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fontSizeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(subscriptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(editPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(italicButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(underlineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(boldButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(superscriptButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(strikeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        toolbarTabbedPane.addTab(resourceMap.getString("editPanel.TabConstraints.tabTitle"), editPanel); // NOI18N

        findPanel.setName("findPanel"); // NOI18N

        findTextField.setText(resourceMap.getString("findTextField.text")); // NOI18N
        findTextField.setName("findTextField"); // NOI18N

        replaceTextField.setText(resourceMap.getString("replaceTextField.text")); // NOI18N
        replaceTextField.setName("replaceTextField"); // NOI18N

        searchNextButton.setText(resourceMap.getString("searchNextButton.text")); // NOI18N
        searchNextButton.setName("searchNextButton"); // NOI18N
        searchNextButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchNextButtonMouseClicked(evt);
            }
        });

        replaceButton.setText(resourceMap.getString("replaceButton.text")); // NOI18N
        replaceButton.setName("replaceButton"); // NOI18N
        replaceButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                replaceButtonMouseClicked(evt);
            }
        });

        replaceAllButton.setText(resourceMap.getString("replaceAllButton.text")); // NOI18N
        replaceAllButton.setName("replaceAllButton"); // NOI18N
        replaceAllButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                replaceAllButtonMouseClicked(evt);
            }
        });

        searchPrevButton.setText(resourceMap.getString("searchPrevButton.text")); // NOI18N
        searchPrevButton.setName("searchPrevButton"); // NOI18N
        searchPrevButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                searchPrevButtonMouseClicked(evt);
            }
        });

        jSeparator7.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator7.setName("jSeparator7"); // NOI18N

        javax.swing.GroupLayout findPanelLayout = new javax.swing.GroupLayout(findPanel);
        findPanel.setLayout(findPanelLayout);
        findPanelLayout.setHorizontalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(replaceTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(searchNextButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(replaceButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(replaceAllButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(searchPrevButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(233, Short.MAX_VALUE))
        );
        findPanelLayout.setVerticalGroup(
            findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(findPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(findPanelLayout.createSequentialGroup()
                        .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(findTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchNextButton)
                            .addComponent(searchPrevButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(findPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(replaceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(replaceButton)
                            .addComponent(replaceAllButton))))
                .addContainerGap())
        );

        toolbarTabbedPane.addTab(resourceMap.getString("findPanel.TabConstraints.tabTitle"), findPanel); // NOI18N

        jPanel1.setName("jPanel1"); // NOI18N

        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N

        jButton2.setAction(actionMap.get("showAboutBox")); // NOI18N
        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(470, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addContainerGap())
        );

        toolbarTabbedPane.addTab(resourceMap.getString("jPanel1.TabConstraints.tabTitle"), jPanel1); // NOI18N

        editorTabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        editorTabbedPane.setComponentPopupMenu(tabPopupMenu);
        editorTabbedPane.setName("editorTabbedPane"); // NOI18N
        editorTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editorTabbedPaneMouseClicked(evt);
            }
        });

        emptyPanel.setEnabled(false);
        emptyPanel.setName("emptyPanel"); // NOI18N

        javax.swing.GroupLayout emptyPanelLayout = new javax.swing.GroupLayout(emptyPanel);
        emptyPanel.setLayout(emptyPanelLayout);
        emptyPanelLayout.setHorizontalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 616, Short.MAX_VALUE)
        );
        emptyPanelLayout.setVerticalGroup(
            emptyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 201, Short.MAX_VALUE)
        );

        editorTabbedPane.addTab(resourceMap.getString("emptyPanel.TabConstraints.tabTitle"), emptyPanel); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbarTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
            .addComponent(editorTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 621, Short.MAX_VALUE)
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addComponent(toolbarTabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editorTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE))
        );

        openDialogBox.setName("openDialogBox"); // NOI18N

        saveAsDialogBox.setDialogTitle(resourceMap.getString("saveAsDialogBox.dialogTitle")); // NOI18N
        saveAsDialogBox.setDialogType(javax.swing.JFileChooser.SAVE_DIALOG);
        saveAsDialogBox.setName("saveAsDialogBox"); // NOI18N

        tabPopupMenu.setInvoker(editorTabbedPane);
        tabPopupMenu.setName("tabPopupMenu"); // NOI18N

        editorPopupMenu.setName("editorPopupMenu"); // NOI18N

        propertiesDialogBox.setName("propertiesDialogBox"); // NOI18N
        propertiesDialogBox.setResizable(false);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        jSeparator8.setName("jSeparator8"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N

        jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N

        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N

        javax.swing.GroupLayout propertiesDialogBoxLayout = new javax.swing.GroupLayout(propertiesDialogBox.getContentPane());
        propertiesDialogBox.getContentPane().setLayout(propertiesDialogBoxLayout);
        propertiesDialogBoxLayout.setHorizontalGroup(
            propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesDialogBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, propertiesDialogBoxLayout.createSequentialGroup()
                        .addGroup(propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(29, 29, 29)
                        .addGroup(propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addComponent(jLabel11)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE)))
                    .addGroup(propertiesDialogBoxLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(36, 36, 36)
                        .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, 142, Short.MAX_VALUE))
                    .addComponent(jSeparator8, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                    .addGroup(propertiesDialogBoxLayout.createSequentialGroup()
                        .addGroup(propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel10))
                        .addGap(26, 26, 26)
                        .addGroup(propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel16))))
                .addContainerGap())
        );
        propertiesDialogBoxLayout.setVerticalGroup(
            propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(propertiesDialogBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator8, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel16)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(propertiesDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10)
                    .addComponent(jLabel18))
                .addContainerGap(61, Short.MAX_VALUE))
        );

        fontColorDialogBox.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        fontColorDialogBox.setTitle(resourceMap.getString("fontColorDialogBox.title")); // NOI18N
        fontColorDialogBox.setName("fontColorDialogBox"); // NOI18N
        fontColorDialogBox.setResizable(false);

        fontColorChooser.setName("fontColorChooser"); // NOI18N

        fontColorOkButton.setText(resourceMap.getString("fontColorOkButton.text")); // NOI18N
        fontColorOkButton.setName("fontColorOkButton"); // NOI18N
        fontColorOkButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fontColorOkButtonMouseClicked(evt);
            }
        });

        fontColorCancelButton.setText(resourceMap.getString("fontColorCancelButton.text")); // NOI18N
        fontColorCancelButton.setName("fontColorCancelButton"); // NOI18N
        fontColorCancelButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fontColorCancelButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fontColorDialogBoxLayout = new javax.swing.GroupLayout(fontColorDialogBox.getContentPane());
        fontColorDialogBox.getContentPane().setLayout(fontColorDialogBoxLayout);
        fontColorDialogBoxLayout.setHorizontalGroup(
            fontColorDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fontColorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, fontColorDialogBoxLayout.createSequentialGroup()
                .addContainerGap(274, Short.MAX_VALUE)
                .addComponent(fontColorOkButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addComponent(fontColorCancelButton)
                .addContainerGap())
        );
        fontColorDialogBoxLayout.setVerticalGroup(
            fontColorDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fontColorDialogBoxLayout.createSequentialGroup()
                .addComponent(fontColorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(fontColorDialogBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(fontColorOkButton)
                    .addComponent(fontColorCancelButton)))
        );

        setComponent(mainPanel);
    }// </editor-fold>//GEN-END:initComponents

    private void editorTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editorTabbedPaneMouseClicked
        // TODO add your handling code here:
        tabClicked();
    }//GEN-LAST:event_editorTabbedPaneMouseClicked

    private void closeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeButtonMouseClicked
        // TODO add your handling code here:
        closeTab(getSelectedIndex());
    }//GEN-LAST:event_closeButtonMouseClicked

    private void pasteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pasteButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        pane.paste();
    }//GEN-LAST:event_pasteButtonMouseClicked

    private void copyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_copyButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        pane.copy();
    }//GEN-LAST:event_copyButtonMouseClicked

    private void cutButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cutButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        pane.cut();
    }//GEN-LAST:event_cutButtonMouseClicked

    private void fontSelectionComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fontSelectionComboBoxPropertyChange
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        if(pane.getContentType().equalsIgnoreCase(PLAIN))
        {
            pane.setFont(new Font(fonts[fontSelectionComboBox.getSelectedIndex()].getFontName(),Font.PLAIN, Integer.valueOf(fontSizeComboBox.getSelectedItem().toString())));
        }
        else
        {
            MutableAttributeSet a=getAttributeSet(pane);
            StyleConstants.setFontFamily(a, fonts[fontSelectionComboBox.getSelectedIndex()].getFamily());
            if(pane.getSelectedText()!=null)
                changeSelectionAttribute(pane, a);
        }
    }//GEN-LAST:event_fontSelectionComboBoxPropertyChange

    private void boldButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_boldButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        
        if(boldButton.isEnabled())
        {
            MutableAttributeSet a=getAttributeSet(pane);
            Border b=boldButton.getBorder();
            
            //if bold is not active
            if(b.toString().equalsIgnoreCase(empty.toString()))
            {
                StyleConstants.setBold(a, true);
                if(pane.getSelectedText()!=null)
                    changeSelectionAttribute(pane, a);
                else
                    boldButton.setBorder(raised);
            }
            else
            {
                boldButton.setBorder(empty);
                StyleConstants.setBold(a, false);
            }
        }
        pane.grabFocus();
    }//GEN-LAST:event_boldButtonMouseClicked

    private void searchNextButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchNextButtonMouseClicked
        // TODO add your handling code here:
        int found=searchNext();
        
    }//GEN-LAST:event_searchNextButtonMouseClicked

    private void searchPrevButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchPrevButtonMouseClicked
        // TODO add your handling code here:
        int found=searchPrev();
    }//GEN-LAST:event_searchPrevButtonMouseClicked

    private void replaceButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_replaceButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        if(pane.getSelectedText()==null)
        {
            if(searchNext()==-1)
                Toolkit.getDefaultToolkit().beep();
        }
        else
        {
            pane.replaceSelection(replaceTextField.getText());
            if(searchNext()==-1)
                Toolkit.getDefaultToolkit().beep();
        }
    }//GEN-LAST:event_replaceButtonMouseClicked

    private void replaceAllButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_replaceAllButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        
        //Loop continues till every match has been replaced
        while(searchNext()==0)
        {
            pane.replaceSelection(replaceTextField.getText());
        }
        Toolkit.getDefaultToolkit().beep();
    }//GEN-LAST:event_replaceAllButtonMouseClicked

    private void toolbarTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_toolbarTabbedPaneMouseClicked
        // TODO add your handling code here:
        if(toolbarTabbedPane.getSelectedIndex()==2)
        {
            EditorPane pane=getEditorPane();
            if(pane.getSelectedText()!=null)
                findTextField.setText(pane.getSelectedText());
        }
    }//GEN-LAST:event_toolbarTabbedPaneMouseClicked

    private void printButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_printButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        try {
            pane.print();
        } catch (PrinterException ex) {
            sop("Error while printing");
        }
    }//GEN-LAST:event_printButtonMouseClicked

    private void propertiesButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_propertiesButtonMouseClicked
        // TODO add your handling code here:
        propertiesDialogBox.setVisible(true);
        propertiesDialogBox.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        propertiesDialogBox.setTitle("Properties");
        propertiesDialogBox.setLocation(10, 10);
        propertiesDialogBox.pack();
        EditorPane pane=getEditorPane();
        File file=pane.myGetFile();
        if(file!=null)
        {
            String Break="<br>";
            String size;
            String ext;
            String location;
            if(file.length()<1024)
                size=String.valueOf(file.length())+" Bytes";
            else if(file.length()/1024<1024)
                size=String.valueOf((float)file.length()/1024)+" KB";
            else
                size=String.valueOf((float)(file.length()/1024)/1024)+" MB";
            
            ext=file.getName().substring(file.getName().lastIndexOf('.')+1);
            location=file.getAbsolutePath();
            int index=0;
            location="<html>";
            while(index<file.getAbsolutePath().length())
            {
                location+=file.getAbsolutePath().substring(index, file.getAbsolutePath().length()-index>26?index+26:file.getAbsolutePath().length())+Break;
                index+=26;
            }
            jLabel1.setText(pane.myGetFullFileName());
            jLabel11.setText(size);
            jLabel12.setText(ext);
            jLabel13.setText(location);
            jLabel16.setText(String.valueOf(!file.canWrite()));
            jLabel18.setText(String.valueOf(file.isHidden()));
        }
        
    }//GEN-LAST:event_propertiesButtonMouseClicked

    private void italicButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_italicButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        if(italicButton.isEnabled())
        {
            MutableAttributeSet a=getAttributeSet(pane);
            Border b=italicButton.getBorder();
            
            //if italic is not active
            if(b.toString().equalsIgnoreCase(empty.toString()))
            {
                StyleConstants.setItalic(a, true);
                if(pane.getSelectedText()!=null)
                    changeSelectionAttribute(pane, a);
                else
                    italicButton.setBorder(raised);
            }
            else
            {
                italicButton.setBorder(empty);
                StyleConstants.setItalic(a, false);
            }
        }
        pane.grabFocus();
    }//GEN-LAST:event_italicButtonMouseClicked

    private void underlineButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_underlineButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        if(underlineButton.isEnabled())
        {
            MutableAttributeSet a=getAttributeSet(pane);
            Border b=underlineButton.getBorder();
            
            //if underline is not active
            if(b.toString().equalsIgnoreCase(empty.toString()))
            {
                StyleConstants.setUnderline(a, true);
                if(pane.getSelectedText()!=null)
                    changeSelectionAttribute(pane, a);
                else
                    underlineButton.setBorder(raised);
            }
            else
            {
                underlineButton.setBorder(empty);
                StyleConstants.setUnderline(a, false);
            }
        }
        pane.grabFocus();
    }//GEN-LAST:event_underlineButtonMouseClicked

    private void subscriptButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_subscriptButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        if(subscriptButton.isEnabled())
        {
            MutableAttributeSet a=getAttributeSet(pane);
            Border b=subscriptButton.getBorder();
            
            //if subscript is not active
            if(b.toString().equalsIgnoreCase(empty.toString()))
            {
                StyleConstants.setSubscript(a, true);
                if(pane.getSelectedText()!=null)
                    changeSelectionAttribute(pane, a);
                else
                    subscriptButton.setBorder(raised);
            }
            else
            {
                subscriptButton.setBorder(empty);
                StyleConstants.setSubscript(a, false);
            }
        }
        pane.grabFocus();
    }//GEN-LAST:event_subscriptButtonMouseClicked

    private void superscriptButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_superscriptButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        if(superscriptButton.isEnabled())
        {
            MutableAttributeSet a=getAttributeSet(pane);
            Border b=superscriptButton.getBorder();
            
            //if superscript is not active
            if(b.toString().equalsIgnoreCase(empty.toString()))
            {
                StyleConstants.setSuperscript(a, true);
                if(pane.getSelectedText()!=null)
                    changeSelectionAttribute(pane, a);
                else
                    superscriptButton.setBorder(raised);
            }
            else
            {
                superscriptButton.setBorder(empty);
                StyleConstants.setSuperscript(a, false);
            }
        }
        pane.grabFocus();
    }//GEN-LAST:event_superscriptButtonMouseClicked

    private void fontSizeComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_fontSizeComboBoxPropertyChange
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        if(pane.getContentType().equalsIgnoreCase(PLAIN))
        {
            pane.setFont(new Font(fonts[fontSelectionComboBox.getSelectedIndex()].getFontName(),Font.PLAIN, Integer.valueOf(fontSizeComboBox.getSelectedItem().toString())));
        }
        else
        {
            MutableAttributeSet a=getAttributeSet(pane);
            StyleConstants.setFontSize(a, Integer.parseInt(fontSizeComboBox.getSelectedItem().toString()));
            if(pane.getSelectedText()!=null)
                changeSelectionAttribute(pane, a);
        }
    }//GEN-LAST:event_fontSizeComboBoxPropertyChange

    private void strikeButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_strikeButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        if(strikeButton.isEnabled())
        {
            MutableAttributeSet a=getAttributeSet(pane);
            Border b=strikeButton.getBorder();
            
            //if strike is not active
            if(b.toString().equalsIgnoreCase(empty.toString()))
            {
                StyleConstants.setStrikeThrough(a, true);
                if(pane.getSelectedText()!=null)
                    changeSelectionAttribute(pane, a);
                else
                    strikeButton.setBorder(raised);
            }
            else
            {
                strikeButton.setBorder(empty);
                StyleConstants.setStrikeThrough(a, false);
            }
        }
        pane.grabFocus();
    }//GEN-LAST:event_strikeButtonMouseClicked

    private void fontColorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fontColorButtonMouseClicked
        // TODO add your handling code here:
        fontColorDialogBox.setVisible(true);
        fontColorDialogBox.setLocation(mainPanel.getLocationOnScreen());
        fontColorDialogBox.pack();
        
    }//GEN-LAST:event_fontColorButtonMouseClicked

    private void fontColorOkButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fontColorOkButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        Color color=fontColorChooser.getColor();
        if(pane.getContentType().equalsIgnoreCase(PLAIN))
        {
            pane.setForeground(color);
        }
        else
        {
        MutableAttributeSet a=getAttributeSet(pane);
        StyleConstants.setForeground(a, color);
        if(pane.getSelectedText()!=null)
            changeSelectionAttribute(pane, a);
        }
        fontColorDialogBox.dispose();
        pane.grabFocus();
    }//GEN-LAST:event_fontColorOkButtonMouseClicked

    private void fontColorCancelButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fontColorCancelButtonMouseClicked
        // TODO add your handling code here:
        EditorPane pane=getEditorPane();
        fontColorDialogBox.dispose();
        pane.grabFocus();
    }//GEN-LAST:event_fontColorCancelButtonMouseClicked

    private void undoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_undoButtonMouseClicked
        // TODO add your handling code here:
        try {
                EditorPane pane=getEditorPane();
                if(pane.myGetUndoManager().canUndo())
                    pane.myGetUndoManager().undo();
                else
                    Toolkit.getDefaultToolkit().beep();
            } catch (CannotUndoException ex) {
                System.out.println("Unable to undo: " + ex);
            }
    }//GEN-LAST:event_undoButtonMouseClicked

    private void redoButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_redoButtonMouseClicked
        // TODO add your handling code here:
        try {
            EditorPane pane=getEditorPane();
            if(pane.myGetUndoManager().canRedo())
                pane.myGetUndoManager().redo();
            else
                Toolkit.getDefaultToolkit().beep();
            } catch (CannotRedoException ex) {
                System.out.println("Unable to redo: " + ex);
            }
    }//GEN-LAST:event_redoButtonMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton boldButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JButton cutButton;
    private javax.swing.JPanel editPanel;
    private javax.swing.JPopupMenu editorPopupMenu;
    private javax.swing.JTabbedPane editorTabbedPane;
    private javax.swing.JPanel emptyPanel;
    private javax.swing.JPanel findPanel;
    private javax.swing.JTextField findTextField;
    private javax.swing.JButton fontColorButton;
    private javax.swing.JButton fontColorCancelButton;
    private javax.swing.JColorChooser fontColorChooser;
    private javax.swing.JDialog fontColorDialogBox;
    private javax.swing.JButton fontColorOkButton;
    private javax.swing.JComboBox fontSelectionComboBox;
    private javax.swing.JComboBox fontSizeComboBox;
    private javax.swing.JPanel homePanel;
    private javax.swing.JButton italicButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JSeparator jSeparator9;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton openButton;
    private javax.swing.JFileChooser openDialogBox;
    private javax.swing.JButton pasteButton;
    private javax.swing.JButton printButton;
    private javax.swing.JButton propertiesButton;
    private javax.swing.JDialog propertiesDialogBox;
    private javax.swing.JButton redoButton;
    private javax.swing.JButton replaceAllButton;
    private javax.swing.JButton replaceButton;
    private javax.swing.JTextField replaceTextField;
    private javax.swing.JButton saveAsButton;
    private javax.swing.JFileChooser saveAsDialogBox;
    private javax.swing.JButton saveButton;
    private javax.swing.JButton searchNextButton;
    private javax.swing.JButton searchPrevButton;
    private javax.swing.JButton strikeButton;
    private javax.swing.JButton subscriptButton;
    private javax.swing.JButton superscriptButton;
    private javax.swing.JPopupMenu tabPopupMenu;
    private javax.swing.JTabbedPane toolbarTabbedPane;
    private javax.swing.JButton underlineButton;
    private javax.swing.JButton undoButton;
    // End of variables declaration//GEN-END:variables


    private JDialog aboutBox;
    private final String TITLE="EditNow";
    private final String PLAIN="text/plain";
    private final String RTF="text/rtf";
    private Font fonts[];
    Border raised=new BevelBorder(BevelBorder.RAISED);
    Border empty;
    
    //My methods start from here
    
    //Initializing the frame elements
    void myInit()
    {
        fontColorButton.setText("<html><font color=black>A</font></html>");
        toolbarTabbedPane.setSelectedIndex(0);
        tabClicked();
        
        openDialogBox.setApproveButtonText("Open");
        openDialogBox.setDialogTitle("Open");
        openDialogBox.setDialogType(0);
        openDialogBox.setFileSelectionMode(JFileChooser.FILES_ONLY);
        openDialogBox.setMultiSelectionEnabled(false);
        openDialogBox.setFileFilter(new FileNameExtensionFilter("Rich Text Files (rtf)","rtf"));
        openDialogBox.addChoosableFileFilter(new FileNameExtensionFilter("Text Files (txt)","txt"));
        
        //Save dialog box
        saveAsDialogBox.setFileFilter(new FileNameExtensionFilter("Text Files (txt)","txt"));
        saveAsDialogBox.addChoosableFileFilter(new FileNameExtensionFilter("Rich Text Files (rtf)","rtf"));
                
        //Setting Windows title
        setWindowsTitle("*Untitled");
        
        //Creating tab pop up menu
        JMenuItem addTab=new JMenuItem("Add Tab");
        JMenuItem closeTab=new JMenuItem("Close Tab");
        JMenuItem closeAllTab=new JMenuItem("Close Other Tabs");
        addTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent e) {
                createNewTab("*Untitled");
            }
        });
        closeTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent e) {
                closeTab(getSelectedIndex());
            }
        });
        closeAllTab.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(ActionEvent e) {
                closeAllTab(getSelectedIndex());
            }
        });
        
        tabPopupMenu.add(addTab);
        tabPopupMenu.add(closeTab);
        tabPopupMenu.add(closeAllTab);
        
        //Loading all system fonts and setting default font to Calibri
        GraphicsEnvironment ge=GraphicsEnvironment.getLocalGraphicsEnvironment();
        fonts=ge.getAllFonts();
        getSystemFonts(fonts);
        
        empty=boldButton.getBorder();
        
    }
    
    //Checks what to do on clicking a certain tab
    void tabClicked()
    {
        /*
         * If the tab clicked is the tab containing emptyPanel
         *delete the tab containing empty panel and add a new tab
         *and then again add a new tab containig empty panel
         */
        if("emptyPanel".equalsIgnoreCase(editorTabbedPane.getComponentAt(editorTabbedPane.getSelectedIndex()).getName()))
        {
            createNewTab("*Untitled");
        }
        
        else
        {
            EditorPane editorPane=getEditorPane();
            
            if(editorPane.myGetFile()==null)
            {
                setWindowsTitle("*Untitled");
            }
            else
            {
                setWindowsTitle(editorPane.myGetFullFileName());
            }
        }
        
        //Disabling or enabling button for plain and rtf documents resp.
        EditorPane pane=getEditorPane();
        if(pane.getContentType().equalsIgnoreCase(PLAIN))
        {
            disableFormattingButtons(true);
        }
        else
        {
            disableFormattingButtons(false);
        }
    }
    
    //Creates a new tab with given string name
    void createNewTab(String name)
    {
        RTFEditorKit rtf=new RTFEditorKit();
        //creating a new empty panel to put in new tab button
        JPanel panel=new JPanel();
        panel.setName("emptyPanel");
        panel.setEnabled(false);
        //Removing Last tab
        editorTabbedPane.removeTabAt(editorTabbedPane.getTabCount()-1);
            
        //Adding editor pane to tabbed pane
        EditorPane editorPane=new EditorPane(null);
        editorPane.setContentType("text/rtf");
        editorPane.setEditorKit(rtf);
        editorPane.getDocument().addUndoableEditListener(new MyUndoableEditListener(editorPane));
        editorPane.addCaretListener(new MyCaretListener(editorPane));
        JScrollPane scrollPane=new JScrollPane();
        editorTabbedPane.addTab(name, scrollPane);
        scrollPane.setViewportView(editorPane);
        scrollPane.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
            
        //Again adding new tab
        editorTabbedPane.addTab("+", panel);
        editorTabbedPane.setSelectedIndex(editorTabbedPane.getTabCount()-2);
        
    }
    
    /**
     * To set the main window title accordingly to the file opened
     * @param name the title of the window
     */
    void setWindowsTitle(String name)
    {
        JFrame frame=(JFrame)mainPanel.getRootPane().getParent();         
        frame.setTitle(TITLE +" : "+name);
    }
    
    /**
     * Sets tab title at given index
     * @param index the index in editorTabbedPane
     * @param name the name which will be set for tab name
     */
    void setTabTitle(int index, String name)
    {
        editorTabbedPane.setTitleAt(index, name);
    }
    
    /**
     * Opens a file accordingly to the the extension and sets the document content type for same
     * @param file the file which needs to be opened
     * @param pane the EditorPane in which the file needs to be opened
     * @param force 
     * @throws IOException 
     */
    void openFile(File file, EditorPane pane) throws IOException
    {
        RTFEditorKit rtf=new RTFEditorKit();
        boolean failed=true;
        
        try {
                pane.getDocument().remove(0, pane.getDocument().getLength());
        } catch (BadLocationException ex) {
                sop("Error removing the document");
        }
        
        if(file.getAbsolutePath().toLowerCase().endsWith(".rtf"))
        {
            pane.setContentType("text/rtf");
            pane.setEditorKit(rtf);
            InputStream f;
            try{
                f=new FileInputStream(file);
                rtf.read(f, pane.getDocument(), 0);
                pane.mySetFile(file);
                pane.getDocument().addUndoableEditListener(new MyUndoableEditListener(pane));
                pane.addCaretListener(new MyCaretListener(pane));
                failed=false;
            }
            catch (BadLocationException ex) {
                sop("File not Found");
            }        
            catch(FileNotFoundException ex){
                sop("File not Found");
            }
        }
        else
        {
            disableFormattingButtons(true);
            pane.setContentType("text/plain");
            FileReader f;
            try{
                f=new FileReader(file);
                rtf.read(f, pane.getDocument(), 0);
                pane.mySetFile(file);
                pane.getDocument().addUndoableEditListener(new MyUndoableEditListener(pane));
                failed=false;
            }
            catch (BadLocationException ex) {
                sop("File not Found");
            }        
            catch(FileNotFoundException ex){
                sop("File Not Found");
            }
        }  
        
        if(!failed)
        {
            pane.myGetUndoManager().discardAllEdits();
            pane.setCaretPosition(0);
            pane.requestFocusInWindow();
            setWindowsTitle(pane.myGetFullFileName());
            setTabTitle(getSelectedIndex(), pane.myGetDisplayableFileName());
        }
    }
    
    /*
     * force=0 for checking if overwrite or not
     * force=1 to escape this check
     */
    void saveFile(EditorPane pane, File file, String fileExt, int force)
    {
        
        int overwrite;
        int rtf;
        String contentType=pane.getContentType();      //get the content type of editorPane
        String absolutePath;
        String ext;
        
        if(file.exists())
        {
            int index=file.getName().lastIndexOf('.')+1;
            try{
                ext=file.getName().substring(index).toLowerCase();
            }
            catch(IndexOutOfBoundsException ex)
            {
                ext="";
            }
        }
        else if(fileExt.equalsIgnoreCase("Rich Text Files (rtf)"))
            ext="rtf";
        else if(fileExt.equalsIgnoreCase("Text Files (txt)"))
            ext="txt";
        //if all files is selected in the the save dialog box
        else
            ext=null;
        
        if(ext!=null && !file.exists())
            absolutePath=file.getAbsolutePath()+"."+ext;
        else
            absolutePath=file.getAbsolutePath();
        
        file=new File(absolutePath);
        
        if(!file.canWrite() && file.exists())
        {
            JOptionPane.showConfirmDialog(mainPanel, "The file cannot be overwritten.","ERROR!!!", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
        }
        
        //If the document is in rtf format and is being saved in other format then rtf
        else if(file.exists())
        {
            /*
             * Asking user whether to overwrite a file or not
             * exists Value:
             * -1   closed Dialog box
             * 0    yes
             * 1    no
             */
            if(force==0)
                overwrite=JOptionPane.showConfirmDialog(mainPanel, "The file already exists. Do you want to overwrite it?","File already exists!!!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
            else
                overwrite=0;
            
            if(overwrite==0)
            {
                if(contentType.equalsIgnoreCase(RTF) && !ext.equalsIgnoreCase("rtf"))
                {
                    rtf=JOptionPane.showConfirmDialog(mainPanel, "Saving file in other extension then \".rtf\" you can lose some of the formattings. "
                            + "Do you wish to continue?","File formatting!!!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    if(rtf==0)
                    {
                        writeFile(pane, file, 1);
                    }
                    else
                    {
                        showSaveAsDialogBox();
                    }
                }
                else
                {
                    writeFile(pane, file, 0);   //Writing file in rtf format
                }
            }
            
            //If the user does not wants to over write 
            else
            {
                showSaveAsDialogBox();
            }
        }
        
        //If file does not exists
        else
        {
            if(contentType.equalsIgnoreCase(RTF) && !ext.equalsIgnoreCase("rtf"))
                {
                    rtf=JOptionPane.showConfirmDialog(mainPanel, "Saving file in other extension then \".rtf\" you can lose some of the formattings. "
                            + "Do you wish to continue?","File formatting!!!", JOptionPane.YES_NO_OPTION, JOptionPane.INFORMATION_MESSAGE);
                    if(rtf==0)
                    {
                        writeFile(pane, file, 1);
                    }
                    else
                    {
                        showSaveAsDialogBox();
                    }
                }
                else
                {
                    writeFile(pane, file, 0);   //Writing file in rtf format
                }
        }
        
    }
    
    /**
     * 
     * @param pane
     * @param file
     * @param type 0 for rich text file and 1 for other types including text
     */
    void writeFile(EditorPane pane, File file, int type)
    {
        if(type==0) //rtf type
        {
            try {
                OutputStream os=new FileOutputStream(file);
                try {
                    pane.getEditorKit().write(os, pane.getDocument(), 0, pane.getDocument().getLength());
                    os.flush();
                    os.close();
                    openFile(file, pane);
                } catch (IOException ex) {
                    System.out.println("File cannot be saved");
                } catch (BadLocationException ex) {
                    System.out.println("File cannot be saved");
                }
            } catch (FileNotFoundException ex) {
                System.out.println("File not found");
            }
            
        }
        
        else
        {
            try {
                FileWriter fw=new FileWriter(file);
                try {
                    Segment s=new Segment();
                    int textLeft=pane.getDocument().getLength();
                    int off=0;
                    s.setPartialReturn(true);
                    String str="";
                    while(textLeft>0)
                    {
                        pane.getDocument().getText(off, textLeft,s);
                        textLeft-=s.count;
                        off+=s.count;
                        str+=s.toString();
                    }
                    fw.write(str);
                    fw.flush();
                    fw.close();
                    openFile(file, pane);
                } catch (IOException ex) {
                    System.out.println("File cannot be saved");
                } 
                catch (BadLocationException ex) {
                    System.out.println("File cannot be saved");
                }
            } catch (IOException ex) {
                System.out.println("File cannot be saved");
            }
            
        }
    }
            
    //gets the currently selected editorpane
    EditorPane getEditorPane()
    {
        JScrollPane scroll=(JScrollPane)editorTabbedPane.getComponentAt(getSelectedIndex());
        JViewport vp=(JViewport)scroll.getComponent(0);
        EditorPane editorPane=(EditorPane)vp.getComponent(0);
        return(editorPane);
    }
    
    /**
     * 
     * @return returns the currently selected index in JTabbedPane 
     */
    int getSelectedIndex()
    {
        return(editorTabbedPane.getSelectedIndex());
    }
    
    //Just a short of System.out.println() :p
    void sop(Object x)
    {
        System.out.println(x);
    }
    
    //closes the index tab
    void closeTab(int index)
    {
        if(editorTabbedPane.getTabCount()==2)
        {
            editorTabbedPane.remove(0);
            createNewTab("*Untitled");
        }
        
        else if(index!=editorTabbedPane.getTabCount()-1)
        {
            editorTabbedPane.remove(index);
        }
    }
    
    //Closes all the tabs except the index tab
    void closeAllTab(int index)
    {
        int count=editorTabbedPane.getTabCount();
        editorTabbedPane.setSelectedIndex(index);
        while(count>2)
        {
            for(int i=0; i<count; i++)
            {
                if(i!=index && i!=count-1)
                {
                    editorTabbedPane.remove(i);
                    break;
                }
            }
            count=editorTabbedPane.getTabCount();
            index=editorTabbedPane.getSelectedIndex();
        }
    }
    
    //Gets all the system fonts
    void getSystemFonts(Font fonts[])
    {
        fontSelectionComboBox.removeAllItems();
        for(Font f:fonts)
        {
            fontSelectionComboBox.addItem(f.getFontName());
        }
        fontSelectionComboBox.setSelectedItem("Calibri");
    }
    
    //Search from the carat pos for a given word
    int searchNext()
    {
        EditorPane pane=getEditorPane();
        String content;
        int index=pane.getCaretPosition();
        String find=findTextField.getText();
        try {
            content=pane.getDocument().getText(0, pane.getDocument().getLength());
            if(find.length()>0)
            {
                index=content.indexOf(find, index);
                if(index==-1)
                {
                    index=content.indexOf(find, 0);
                }
                if(index!=-1)
                {
                    pane.grabFocus();
                    pane.setCaretPosition(index);
                    pane.moveCaretPosition(index+find.length());
                }
                
            }
        } catch (BadLocationException ex) {
            sop("Error in selecting");
        }
        //If not found any substring
        if(index==-1)
            return(-1);
        else
            return 0;
    }
    
    //Search in opposite direction from the carat pos to search for a given word
    int searchPrev()
    {
        EditorPane pane=getEditorPane();
        String content;
        int index=pane.getCaretPosition()-1;
        String find=findTextField.getText();
        try {
            content=pane.getDocument().getText(0, pane.getDocument().getLength());
            if(find.length()>0)
            {
                index=content.lastIndexOf(find, index);
                if(index==-1)
                {
                    index=content.lastIndexOf(find, content.length());
                }
                if(index!=-1)
                {
                    pane.grabFocus();
                    pane.setCaretPosition(index+find.length());
                    pane.moveCaretPosition(index);
                }
                
            }
        } catch (BadLocationException ex) {
            sop("Error in selecting");
        }
        //If not found any substring
        if(index==-1)
            return(-1);
        else
            return 0;
    }
    
    //Gets the attribute set for inputing characters
    MutableAttributeSet getAttributeSet(EditorPane pane)
    {
        StyledEditorKit kit=(StyledEditorKit)pane.getEditorKit();
        MutableAttributeSet attr=kit.getInputAttributes();
        return attr;
    }
    
    /**
     * 
     * @param pane the EditorPane in which the editing has to be done
     * @param a the attribute set which has to be added to the string
     */
    void changeSelectionAttribute(EditorPane pane, MutableAttributeSet a)
    {
        int mark,dot;
        String s;
        mark=pane.getCaret().getMark();
        dot=pane.getCaret().getDot();
        if(dot>mark)
        {
            try {
                s=pane.getDocument().getText(mark, dot-mark);
                sop(s);
                pane.getDocument().remove(mark, dot-mark);
                pane.getDocument().insertString(mark, s, a);
            } catch (BadLocationException ex) {
                sop("Error in replacing txt");
            }
        }
        else
        {
            try {
                s=pane.getDocument().getText(dot, mark-dot);
                pane.getDocument().remove(dot, mark-dot);
                pane.getDocument().insertString(dot, s, a);
            } catch (BadLocationException ex) {
                sop("Error in replacing txt");
            }
        }
        pane.setCaretPosition(mark);
        pane.moveCaretPosition(dot);
    }
    
    //Used so as to disable the buttons not going to be used in plain text editor
    void disableFormattingButtons(boolean bool)
    {
        bool=!bool;
        boldButton.setEnabled(bool);
        italicButton.setEnabled(bool);
        underlineButton.setEnabled(bool);
        subscriptButton.setEnabled(bool);
        superscriptButton.setEnabled(bool);
        strikeButton.setEnabled(bool);
    }
    
    //This listens for and reports caret movements.
    class MyCaretListener implements CaretListener {
        EditorPane pane;
        
        public MyCaretListener(EditorPane p)
        {
            pane=p;
        }
        
        public void caretUpdate(CaretEvent e) {
            if(pane.getEditorKit().getContentType().equalsIgnoreCase(RTF))
            {
        StyledEditorKit kit=(StyledEditorKit)pane.getEditorKit();
        MutableAttributeSet attr=kit.getInputAttributes();
        
        String textColor="";
        if(StyleConstants.isBold(attr))
            boldButton.setBorder(raised);
        else
            boldButton.setBorder(empty);
        
        if(StyleConstants.isItalic(attr))
            italicButton.setBorder(raised);
        else
            italicButton.setBorder(empty);
        
        if(StyleConstants.isUnderline(attr))
            underlineButton.setBorder(raised);
        else
            underlineButton.setBorder(empty);
        
        if(StyleConstants.isSubscript(attr))
            subscriptButton.setBorder(raised);
        else
            subscriptButton.setBorder(empty);
        
        if(StyleConstants.isSuperscript(attr))
            superscriptButton.setBorder(raised);
        else
            superscriptButton.setBorder(empty);
        
        if(StyleConstants.isStrikeThrough(attr))
            strikeButton.setBorder(raised);
        else
            strikeButton.setBorder(empty);
        
        fontSizeComboBox.setSelectedItem(StyleConstants.getFontSize(attr));
        fontSelectionComboBox.setSelectedItem(StyleConstants.getFontFamily(attr));
        
        Color c=StyleConstants.getForeground(attr);
        textColor=Integer.toHexString(c.getRed())+Integer.toHexString(c.getGreen())+Integer.toHexString(c.getBlue());
        fontColorButton.setText("<html><font color=#"+textColor+">A");
        }
        }
    }
}





/**
 * 
 * @author Himanshu
 * Class extending JEditorPane to give more functionality
 * to the program.
 * All methods have been preceeded by my to have a quick access to them 
 */

class EditorPane extends JEditorPane
{
    private File file;
    private String fullFileName;            //File Name to be shown in Title bar
    private String displayableFileName;     //File Name to be shown by Tabbed Pane
    private final int MAX=10;               //Maximum file displayable file name
    private UndoManager undo;
        
    /**
     * 
     * @param pane The JTabbedPane which contains this JEditorPane
     * @param f The File which is being opened in this pane;
     */
    public EditorPane(File f)
    {
        super();
        file=f;
        if(f!=null)
        {
            mySetFileName();
        }
        
    }
    
    
    /**
     * 
     * @return Returns the file which is opened in this pane and if not set returns null
     */
    public File myGetFile()
    {
        return(file);
    }
    
    /**
     * 
     * @param f To set the file used in this EditorPane
     */
    public void mySetFile(File f)
    {
        file=f;
        mySetFileName();
    }
    
    /**
     * Sets the file name which has to be shown in the tab
     */
    private void mySetFileName()
    {
        fullFileName=file.getName();
        String dis;
        dis=fullFileName.substring(0, fullFileName.lastIndexOf('.'));
        if(dis.length()<MAX)
        {
            displayableFileName=dis;
            for(int i=0; i<MAX-dis.length(); i++)
                displayableFileName+=" ";
        }
        else
            displayableFileName=dis.substring(0, MAX-4)+"...";
    }
    
    public String myGetFullFileName()
    {
        return(fullFileName);
    }
    
    public String myGetDisplayableFileName()
    {
        return(displayableFileName);
    }
    
    public void mySetUndoManager(UndoManager undo)
    {
        this.undo=undo;
    }
    
    public UndoManager myGetUndoManager()
    {
        return(undo);
    }
    
}


 //This class listens for edits that can be undone.
class MyUndoableEditListener implements UndoableEditListener
{
    EditorPane pane;
    
    /**
     * 
     * @param pane the EditorPane for which the undo events have to be registered
     */
    public MyUndoableEditListener(EditorPane pane)
    {
        this.pane=pane;
        this.pane.mySetUndoManager(new UndoManager());
    }
    
    public void undoableEditHappened(UndoableEditEvent e)
    {
        //Remember the edit and update the menus.
        pane.myGetUndoManager().addEdit(e.getEdit());
    }
}